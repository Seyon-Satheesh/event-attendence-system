//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub grade: Option<i32>,
    pub verified: bool,
    pub points: i32,
    pub role: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::host::Entity")]
    Host,
    #[sea_orm(has_many = "super::registrant::Entity")]
    Registrant,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::Role",
        to = "super::role::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Role,
}

impl Related<super::host::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Host.def()
    }
}

impl Related<super::registrant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Registrant.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Role.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
